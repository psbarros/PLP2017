/*listas e recursão em prolog*/
/*tam(L,T)*/

tam([],0).
tam([_|R], T):-
    tam(R, TR),
    T is 1 + TR.

/*Exercicios -- escreva os seguintes predicados usando recursão*/


/*soma(L,S) = S eh a soma dos valores de L
    soma([1,2,3],6) = V                         */
soma([],0).
soma([P|R], S) :-
    soma(R, SRL) /*srl eh a soma do resto da lista*/
    S is P + SRL. /*S = P + soma do resto da lista*/

/*prod(L,P) = P eh produto dos valores de L
  prod([2,3,4],24) = V */

prod([],1).
prod([P|R], Prod):-
    prod(R, ProdR),
    Prod is P * ProdR.

/*pertence(E,L) = V se E pertence a L
    pertence(1,[1]) = V, pertence(1,[2,3]) = F  */

pertence(E, [E|_]).
pertence(E,[_|R]):-
    pertence([E,R])

/*divide(L,L1,L2) = V se 
em L1 e L2. divide([1,2,3,4], [1,3], [2,4]) = V*/    
divide([],[],[]).
divide([E], [E], []).
divide([E1, E2], [E1], [E2]). /*essa regra eh desnecessaria -*/
divide([E1, E2|R], [E1|R1], [E2|R2]) :-
    divide(R, R1, R2).

/*concatena(L1,L2,L) = L eh a concatenação de L1 e L2
    concatena([1,2],[3,4],X) = V se X=[1,2,3,4]*/
concatena([],[],[]).
concatena(L,[],L).
concatena([],L,L)
concatena([P1|R1], L2, [PR|R1comL2]) :-
    concatena(R1,L2, R1comL2)).

/*intercala(L1,L2,L)* = L eh a combinação ordenada de L1 e l2
    onde L1 e L2 sao dadas ordenadas.
    intercala([1,3,4],[2,5],[1,2,3,4,5])*/
intercala([],[],[]).
intercala(L,[],L).
intercala([],L,L).
intercala([P1|R1],[P2|R2],[P1|R3]):-
    PI < P2,
    intercala(R1,[P2,R2], R3).
intercala([P1|R1], [P2,R2], [P2,R3]) :-
    intercala([P1|R1], R2, R3).

/*ordena(L ,LO) = V se LO eh a lista L, ordenada
    ordena([3,1,4,2],X) = V se X = [1,2,3,4]
*/

ordena([],[]).
ordena([E],[E]).
ordena([E1,E2],[E1,E2]) :- E1 < E2
ordena([E1,E2],[E2,E1]).
ordena(L, Ordenada) :-
    divide(L, L1, L2),
    ordena(L1, L1O),
    ordena(L2, L20),
    intercala(L1O, L2O, Ordenada).
